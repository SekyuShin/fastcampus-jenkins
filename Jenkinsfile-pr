
pipeline {
    // 어떠한 에이전트에서도 실행 가능함을 표현
    agent any

    // 환경 변수 지정

    environment {
        // jenkins 가 관리하는 도구의 위치는 이와 같이 환경 변수로 저장 가능
        SONAR_SCANNER_HOME = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
        BRANCH_NAME = "$GIT_BRANCH"
    
    }
    
    options {
        // 빌드를 5개만 유지
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '5')
        // github 프로젝트 설정
        githubProjectProperty(displayName: '', projectUrlStr: 'https://github.com/SekyuShin/fastcampus-jenkins')
    }

    // parameters {
    //     booleanParam(defaultValue: true, description: '배포 포함 여부', name: 'DEPLOY_ENABLED')
    // }


    // stages > stage > steps 순으로 구성
    stages {
        stage('Prepare') {
            steps {
                // 어떤 환경변수가 주입되는지 확인
                sh "printenv"
                script {
                    properties([
                    // https://www.jenkins.io/doc/pipeline/steps/params/pipelinetriggers/
                        pipelineTriggers([
                                // PR builder trigger
                                [
                                        $class        : 'GhprbTrigger',
                                        adminlist     : 'SekyuShin',
                                        cron: "*/15 * * * *",
                                        permitAll     : false,
                                        useGitHubHooks: true,
                                        triggerPhrase : '.*(test this|build this|deploy this).*',
                                        gitHubAuthId  : '29550ed9-95d8-4dc6-8bdf-69adddab1dfc', // Jenkins 설정 > System >  GitHub Pull Request Builder > Auth ID 에서 확인 가능
                                        extensions    : [
                                                [
                                                        $class             : 'GhprbSimpleStatus',
                                                        commitStatusContext: 'jenkins',
                                                        showMatrixStatus   : false
                                                ]
                                        ]
                                ]
                        ])
                    ])
                }
            }
        }
        //stage('Checkout') {
        //    steps {
        //        checkout scmGit(
        //                branches: [[name: 'origin/main']],
        //                // branches: [[name: "${params.BRANCH}"]],
        //                userRemoteConfigs: [[
        //                    // credential id 는 http://localhost:8080/pipeline-syntax/ 에서 checkout step 생성을 통해 확인 가능
        //                    credentialsId: 'github-ssh',
        //                    // credentialsId: '89e12990-2b45-456d-98b3-04e549b01d22',
        //                    url: 'git@github.com:SekyuShin/fastcampus-jenkins.git']
        //                ],
        //                extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'projects/spring-app']]]]
        //        )
        //    }
        //}
        stage('Check Branch Variable') {
            steps {
                echo "Current env.GIT_BRANCH is: ${env.GIT_BRANCH}"
                echo "Current params.BRANCH is: ${params.BRANCH}"
                echo "Current BRANCH_NAME is: $BRANCH_NAME"
            }
        }
        stage('Build') {
            steps {
              // dir 은 디렉토리 이동
              dir("projects/spring-app") {
                  // withGradle 을 하면, Gradle 로그를 해석
                  withGradle {
                       sh "./gradlew build"
                  }
              }
            }
        }


        stage('SonarScanner') {
            when {
                branch '*/main' // 'origin/main' 브랜치인 경우 실행
            }
            steps {
                echo "SonarScanner start"
                // sonarqube 환경하에서, 실행
                withSonarQubeEnv("sonarqube-server") {
                    sh """
                    ${env.SONAR_SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.host.url=http://sonarqube:9000 \
                        -Dsonar.projectKey=practice1 \
                        -Dsonar.projectBaseDir=${WORKSPACE}/projects/spring-app
                     """
                }

                // quality gate 통과시 까지 대기
                timeout(time: 1, unit: 'MINUTES') {

                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    // post 는 stage 마다 실행시킬 수도 있고, 전체 stages가 완료된 다음에 실행 시킬 수도 있음
    post {
        always {
            scanForIssues tool: ktLint(pattern: '**/ktlint/**/*.xml')
            junit '**/test-results/**/*.xml'
            jacoco sourcePattern: '**/src/main/kotlin'
        }

         success {
            script {
                if ((env.ghprbCommentBody ?: "").contains("deploy this")) {
                    archiveArtifacts artifacts: 'projects/spring-app/build/libs/*-SNAPSHOT.jar'
                    build(
                           job: 'pipeline-deploy',
                           parameters: [booleanParam(name: 'ARE_YOU_SURE', value: "true")],
                           wait: false,
                           propagate: false
                    )
                }
            }
        }
    }
}
